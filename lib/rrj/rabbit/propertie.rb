# frozen_string_literal: true

module RubyRabbitmqJanus
  module Rabbit
    # @author VAILLANT Jeremy <jeremy.vaillant@dazzl.tv>

    # @!attribute [r] correlation
    #   @return [String] Is a string uniq generated by SecureRandom
    #
    # Manage properties to message sending in rabbitmq queue
    class Propertie
      attr_reader :correlation

      # Initialize a message sending to rabbitmq
      def initialize
        Tools::Log.instance.debug 'initalize a propertie to message'
        @correlation = SecureRandom.uuid
        # @instance = instance
        # Tools::Log.instance.info "Inspect : #{self.inspect}"
      end

      # Define options sending to rabbitmq
      def options
        Tools::Log.instance.debug 'Add options to propertie to message'
        # routing = @instance.empty? ? Tools::Config.instance.queue_to : @instance
        {
          routing_key: Tools::Config.instance.queue_to,
          correlation_id: @correlation,
          content_type: 'application/json'
        }
      end

      # Define option sending to rabbitmq for janus admin message
      def options_admin
        Tools::Log.instance.debug 'Add options to propertie to message'
        {
          routing_key: Tools::Config.instance.queue_admin_to,
          correlation_id: @correlation,
          content_type: 'application/json'
        }
      end
    end
  end
end
